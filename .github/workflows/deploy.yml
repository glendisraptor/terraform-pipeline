name: Terraform Multi-Environment Pipeline

on:
  # Automatic deployment triggers
  push:
    branches: [dev, staging]
    paths: ['terraform/**']
  
  # Manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

  # PR validation
  pull_request:
    branches: [dev, staging, main]
    paths: ['terraform/**']

env:
  TF_IN_AUTOMATION: true
  AWS_REGION: us-east-1

jobs:
  setup:
    name: Setup & Environment Detection
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      tf_path: ${{ steps.env.outputs.tf_path }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.base_ref }}" == "main" ]]; then
              ENV="prod"
            elif [[ "${{ github.base_ref }}" == "staging" ]]; then
              ENV="staging"
            else
              ENV="dev"
            fi
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            # Push event
            if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
              ENV="staging"
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              ENV="dev"
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "tf_path=terraform/envs/$ENV" >> $GITHUB_OUTPUT
          echo "üéØ Target environment: $ENV"

  validate:
    name: Validate & Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive terraform/
          echo "‚úÖ Terraform format check passed"

      - name: Terraform Init & Validate
        run: |
          terraform init -backend=false
          terraform validate
          echo "‚úÖ Terraform validation passed"
        working-directory: ${{ needs.setup.outputs.tf_path }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [setup, validate]
    environment: ${{ needs.setup.outputs.environment }}-plan
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.setup.outputs.tf_path }}

      - name: Terraform Plan
        id: plan
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -detailed-exitcode -no-color -out=tfplan
          else
            terraform plan -detailed-exitcode -no-color -out=tfplan
          fi
        working-directory: ${{ needs.setup.outputs.tf_path }}
        continue-on-error: true

      - name: Check Plan Results
        run: |
          case "${{ steps.plan.outputs.exitcode }}" in
            0) echo "‚úÖ No changes needed" ;;
            1) echo "‚ùå Plan failed" && exit 1 ;;
            2) echo "üìã Changes detected" ;;
          esac

      - name: Upload Plan
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ needs.setup.outputs.environment }}-${{ github.sha }}
          path: ${{ needs.setup.outputs.tf_path }}/tfplan

      - name: Comment PR
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == 2
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## üìã Terraform Plan - \`${{ needs.setup.outputs.environment }}\`
            
            **Status:** Changes detected
            **Branch:** \`${{ github.head_ref }}\`
            
            <details><summary>View Plan Details</summary>
            
            Plan completed successfully. Review the full output in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, validate, plan]
    if: |
      needs.setup.outputs.should_deploy == 'true' && 
      (needs.plan.outputs.plan_exitcode == '2' || github.event.inputs.action == 'destroy')
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.setup.outputs.tf_path }}

      - name: Download Plan
        if: github.event.inputs.action != 'destroy'
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ needs.setup.outputs.environment }}-${{ github.sha }}
          path: ${{ needs.setup.outputs.tf_path }}

      - name: Terraform Apply
        if: github.event.inputs.action != 'destroy'
        run: |
          terraform apply -no-color tfplan
          echo "‚úÖ Terraform apply completed"
        working-directory: ${{ needs.setup.outputs.tf_path }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy -auto-approve -no-color
          echo "‚úÖ Terraform destroy completed"
        working-directory: ${{ needs.setup.outputs.tf_path }}

      - name: Show Outputs
        if: github.event.inputs.action != 'destroy'
        run: |
          echo "üì§ Terraform Outputs:"
          terraform output
        working-directory: ${{ needs.setup.outputs.tf_path }}
        continue-on-error: true